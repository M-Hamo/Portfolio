{"ast":null,"code":"import { Directive, NgZone, ElementRef, Renderer2, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nlet nextId = 0; // Boilerplate for applying mixins to MatBadge.\n\n/** @docs-private */\n\nconst _MatBadgeBase = /*#__PURE__*/mixinDisabled(class {});\n/** Directive to display a text badge. */\n\n\nlet MatBadge = /*#__PURE__*/(() => {\n  class MatBadge extends _MatBadgeBase {\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n      super();\n      this._ngZone = _ngZone;\n      this._elementRef = _elementRef;\n      this._ariaDescriber = _ariaDescriber;\n      this._renderer = _renderer;\n      this._animationMode = _animationMode;\n      /** Whether the badge has any content. */\n\n      this._hasContent = false;\n      this._color = 'primary';\n      this._overlap = true;\n      /**\n       * Position the badge should reside.\n       * Accepts any combination of 'above'|'below' and 'before'|'after'\n       */\n\n      this.position = 'above after';\n      /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n\n      this.size = 'medium';\n      /** Unique id for the badge */\n\n      this._id = nextId++;\n\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        const nativeElement = _elementRef.nativeElement;\n\n        if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n          throw Error('matBadge must be attached to an element node.');\n        }\n      }\n    }\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n\n\n    get color() {\n      return this._color;\n    }\n\n    set color(value) {\n      this._setColor(value);\n\n      this._color = value;\n    }\n    /** Whether the badge should overlap its contents or not */\n\n\n    get overlap() {\n      return this._overlap;\n    }\n\n    set overlap(val) {\n      this._overlap = coerceBooleanProperty(val);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n\n\n    get description() {\n      return this._description;\n    }\n\n    set description(newDescription) {\n      if (newDescription !== this._description) {\n        const badgeElement = this._badgeElement;\n\n        this._updateHostAriaDescription(newDescription, this._description);\n\n        this._description = newDescription;\n\n        if (badgeElement) {\n          newDescription ? badgeElement.setAttribute('aria-label', newDescription) : badgeElement.removeAttribute('aria-label');\n        }\n      }\n    }\n    /** Whether the badge is hidden. */\n\n\n    get hidden() {\n      return this._hidden;\n    }\n\n    set hidden(val) {\n      this._hidden = coerceBooleanProperty(val);\n    }\n    /** Whether the badge is above the host or not */\n\n\n    isAbove() {\n      return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n\n\n    isAfter() {\n      return this.position.indexOf('before') === -1;\n    }\n\n    ngOnChanges(changes) {\n      const contentChange = changes['content'];\n\n      if (contentChange) {\n        const value = contentChange.currentValue;\n        this._hasContent = value != null && `${value}`.trim().length > 0;\n\n        this._updateTextContent();\n      }\n    }\n\n    ngOnDestroy() {\n      const badgeElement = this._badgeElement;\n\n      if (badgeElement) {\n        if (this.description) {\n          this._ariaDescriber.removeDescription(badgeElement, this.description);\n        } // When creating a badge through the Renderer, Angular will keep it in an index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n\n\n        if (this._renderer.destroyNode) {\n          this._renderer.destroyNode(badgeElement);\n        }\n      }\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered.\n     * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n     */\n\n\n    getBadgeElement() {\n      return this._badgeElement;\n    }\n    /** Injects a span element into the DOM with the content. */\n\n\n    _updateTextContent() {\n      if (!this._badgeElement) {\n        this._badgeElement = this._createBadgeElement();\n      } else {\n        this._badgeElement.textContent = this._stringifyContent();\n      }\n\n      return this._badgeElement;\n    }\n    /** Creates the badge element */\n\n\n    _createBadgeElement() {\n      const badgeElement = this._renderer.createElement('span');\n\n      const activeClass = 'mat-badge-active';\n      const contentClass = 'mat-badge-content'; // Clear any existing badges which may have persisted from a server-side render.\n\n      this._clearExistingBadges(contentClass);\n\n      badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n      badgeElement.classList.add(contentClass);\n      badgeElement.textContent = this._stringifyContent();\n\n      if (this._animationMode === 'NoopAnimations') {\n        badgeElement.classList.add('_mat-animation-noopable');\n      }\n\n      if (this.description) {\n        badgeElement.setAttribute('aria-label', this.description);\n      }\n\n      this._elementRef.nativeElement.appendChild(badgeElement); // animate in after insertion\n\n\n      if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n        this._ngZone.runOutsideAngular(() => {\n          requestAnimationFrame(() => {\n            badgeElement.classList.add(activeClass);\n          });\n        });\n      } else {\n        badgeElement.classList.add(activeClass);\n      }\n\n      return badgeElement;\n    }\n    /** Sets the aria-label property on the element */\n\n\n    _updateHostAriaDescription(newDescription, oldDescription) {\n      // ensure content available before setting label\n      const content = this._updateTextContent();\n\n      if (oldDescription) {\n        this._ariaDescriber.removeDescription(content, oldDescription);\n      }\n\n      if (newDescription) {\n        this._ariaDescriber.describe(content, newDescription);\n      }\n    }\n    /** Adds css theme class given the color to the component host */\n\n\n    _setColor(colorPalette) {\n      if (colorPalette !== this._color) {\n        const classList = this._elementRef.nativeElement.classList;\n\n        if (this._color) {\n          classList.remove(`mat-badge-${this._color}`);\n        }\n\n        if (colorPalette) {\n          classList.add(`mat-badge-${colorPalette}`);\n        }\n      }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n\n\n    _clearExistingBadges(cssClass) {\n      const element = this._elementRef.nativeElement;\n      let childCount = element.children.length; // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n\n      while (childCount--) {\n        const currentChild = element.children[childCount];\n\n        if (currentChild.classList.contains(cssClass)) {\n          element.removeChild(currentChild);\n        }\n      }\n    }\n    /** Gets the string representation of the badge content. */\n\n\n    _stringifyContent() {\n      // Convert null and undefined to an empty string which is consistent\n      // with how Angular handles them in inside template interpolations.\n      const content = this.content;\n      return content == null ? '' : `${content}`;\n    }\n\n  }\n\n  MatBadge.ɵfac = function MatBadge_Factory(t) {\n    return new (t || MatBadge)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n  };\n\n  MatBadge.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatBadge,\n    selectors: [[\"\", \"matBadge\", \"\"]],\n    hostAttrs: [1, \"mat-badge\"],\n    hostVars: 20,\n    hostBindings: function MatBadge_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx._hasContent)(\"mat-badge-disabled\", ctx.disabled);\n      }\n    },\n    inputs: {\n      disabled: [\"matBadgeDisabled\", \"disabled\"],\n      position: [\"matBadgePosition\", \"position\"],\n      size: [\"matBadgeSize\", \"size\"],\n      color: [\"matBadgeColor\", \"color\"],\n      overlap: [\"matBadgeOverlap\", \"overlap\"],\n      description: [\"matBadgeDescription\", \"description\"],\n      hidden: [\"matBadgeHidden\", \"hidden\"],\n      content: [\"matBadge\", \"content\"]\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return MatBadge;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet MatBadgeModule = /*#__PURE__*/(() => {\n  class MatBadgeModule {}\n\n  MatBadgeModule.ɵfac = function MatBadgeModule_Factory(t) {\n    return new (t || MatBadgeModule)();\n  };\n\n  MatBadgeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatBadgeModule\n  });\n  MatBadgeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[A11yModule, MatCommonModule], MatCommonModule]\n  });\n  return MatBadgeModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBadgeModule, {\n    declarations: function () {\n      return [MatBadge];\n    },\n    imports: function () {\n      return [A11yModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatBadge, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatBadge, MatBadgeModule }; //# sourceMappingURL=badge.js.map","map":null,"metadata":{},"sourceType":"module"}