{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Input, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from 'primeng/api';\nimport { DomHandler } from 'primeng/dom';\nimport { UniqueComponentId } from 'primeng/utils';\nlet BadgeDirective = /*#__PURE__*/(() => {\n  class BadgeDirective {\n    constructor(el) {\n      this.el = el;\n      this.iconPos = 'left';\n    }\n\n    ngAfterViewInit() {\n      this.id = UniqueComponentId() + '_badge';\n      let el = this.el.nativeElement.nodeName.indexOf(\"-\") != -1 ? this.el.nativeElement.firstChild : this.el.nativeElement;\n      let badge = document.createElement('span');\n      badge.id = this.id;\n      badge.className = 'p-badge p-component';\n\n      if (this.severity) {\n        DomHandler.addClass(badge, 'p-badge-' + this.severity);\n      }\n\n      if (this.value != null) {\n        badge.appendChild(document.createTextNode(this.value));\n\n        if (String(this.value).length === 1) {\n          DomHandler.addClass(badge, 'p-badge-no-gutter');\n        }\n      } else {\n        DomHandler.addClass(badge, 'p-badge-dot');\n      }\n\n      DomHandler.addClass(el, 'p-overlay-badge');\n      el.appendChild(badge);\n      this.initialized = true;\n    }\n\n    get value() {\n      return this._value;\n    }\n\n    set value(val) {\n      if (val !== this._value) {\n        this._value = val;\n\n        if (this.initialized) {\n          let badge = document.getElementById(this.id);\n\n          if (this._value) {\n            if (DomHandler.hasClass(badge, 'p-badge-dot')) DomHandler.removeClass(badge, 'p-badge-dot');\n\n            if (String(this._value).length === 1) {\n              DomHandler.addClass(badge, 'p-badge-no-gutter');\n            } else {\n              DomHandler.removeClass(badge, 'p-badge-no-gutter');\n            }\n          } else if (!this._value && !DomHandler.hasClass(badge, 'p-badge-dot')) {\n            DomHandler.addClass(badge, 'p-badge-dot');\n          }\n\n          badge.innerHTML = '';\n          badge.appendChild(document.createTextNode(this._value));\n        }\n      }\n    }\n\n    ngOnDestroy() {\n      this.initialized = false;\n    }\n\n  }\n\n  BadgeDirective.ɵfac = function BadgeDirective_Factory(t) {\n    return new (t || BadgeDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  BadgeDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: BadgeDirective,\n    selectors: [[\"\", \"pBadge\", \"\"]],\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      iconPos: \"iconPos\",\n      value: \"value\",\n      severity: \"severity\"\n    }\n  });\n  return BadgeDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Badge = /*#__PURE__*/(() => {\n  class Badge {\n    containerClass() {\n      return {\n        'p-badge p-component': true,\n        'p-badge-no-gutter': this.value != undefined && String(this.value).length === 1,\n        'p-badge-lg': this.size === 'large',\n        'p-badge-xl': this.size === 'xlarge',\n        'p-badge-info': this.severity === 'info',\n        'p-badge-success': this.severity === 'success',\n        'p-badge-warning': this.severity === 'warning',\n        'p-badge-danger': this.severity === 'danger'\n      };\n    }\n\n  }\n\n  Badge.ɵfac = function Badge_Factory(t) {\n    return new (t || Badge)();\n  };\n\n  Badge.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: Badge,\n    selectors: [[\"p-badge\"]],\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      styleClass: \"styleClass\",\n      style: \"style\",\n      size: \"size\",\n      severity: \"severity\",\n      value: \"value\"\n    },\n    decls: 2,\n    vars: 5,\n    consts: [[3, \"ngClass\", \"ngStyle\"]],\n    template: function Badge_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"span\", 0);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.styleClass);\n        i0.ɵɵproperty(\"ngClass\", ctx.containerClass())(\"ngStyle\", ctx.style);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.value, \" \");\n      }\n    },\n    directives: [i1.NgClass, i1.NgStyle],\n    styles: [\".p-badge{display:inline-block;border-radius:10px;text-align:center;padding:0 .5rem}.p-overlay-badge{position:relative}.p-overlay-badge .p-badge{position:absolute;top:0;right:0;transform:translate(50%,-50%);transform-origin:100% 0;margin:0}.p-badge-dot{width:.5rem;min-width:.5rem;height:.5rem}.p-badge-dot,.p-badge-no-gutter{border-radius:50%;padding:0}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return Badge;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet BadgeModule = /*#__PURE__*/(() => {\n  class BadgeModule {}\n\n  BadgeModule.ɵfac = function BadgeModule_Factory(t) {\n    return new (t || BadgeModule)();\n  };\n\n  BadgeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: BadgeModule\n  });\n  BadgeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule], SharedModule]\n  });\n  return BadgeModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Badge, BadgeDirective, BadgeModule }; //# sourceMappingURL=primeng-badge.js.map","map":null,"metadata":{},"sourceType":"module"}